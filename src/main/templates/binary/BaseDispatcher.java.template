package ${package};

import com.core.util.ArrayUtils;

/**
 * User: jgreco
 * THIS FILE IS AUTOGENERATED
 */
public abstract class ${prefix}BaseDispatcher implements com.core.connector.Dispatcher {
    protected long lastTimestamp;

  #for $msg in $msgs:
    private ${prefix}${msg.name}Listener[] ${msg.nameLower}Listeners = new ${prefix}${msg.name}Listener[0];
  #end for
    private ${prefix}BeforeListener[] beforeMessageListeners = new ${prefix}BeforeListener[0];
    private ${prefix}AfterListener[] afterMessageListeners = new ${prefix}AfterListener[0];

    public interface ${prefix}BeforeListener {
       void on${prefix}BeforeListener(${prefix}CommonEvent msg);
    }

    public interface ${prefix}AfterListener {
       void on${prefix}AfterListener(${prefix}CommonEvent msg);
    }

    @Override
    public long getTimestamp() {
        return this.lastTimestamp;
    }

    @Override
    public void subscribe(Object listener) {
        subscribe(listener, listener.getClass());
    }

    private void subscribe(Object message, Class<?> clz) {
        if (clz == null) {
            return;
        }

        Class<?>[] interfaces = clz.getInterfaces();

        for (Class<?> intCls : interfaces) {
            if (intCls.getInterfaces().length > 0){
               subscribe(message,intCls);
            }
          #for $msg in $msgs
            if (intCls.equals(${prefix}${msg.name}Listener.class)) {
                ${msg.nameLower}Listeners = append(${msg.nameLower}Listeners, (${prefix}${msg.name}Listener) message);
            }

          #end for
            if (intCls.equals(${prefix}BeforeListener.class)) {
                beforeMessageListeners = append(beforeMessageListeners, (${prefix}BeforeListener) message);
            }

            if (intCls.equals(${prefix}AfterListener.class)) {
                afterMessageListeners = append(afterMessageListeners, (${prefix}AfterListener) message);
            }
        }

        subscribe(message, clz.getSuperclass());
    }

    private static <T> T[] append(T[] collection, T item) {
        if (!isSubscribed(collection, item)) {
            return ArrayUtils.append(collection, item);
        }
        return collection;
    }

    private static <T> boolean isSubscribed(T[] collection, T item) {
        for (T i : collection) {
           if (i == item) {
              return true;
           }
        }
        return false;
    }

  #for $msg in $msgs:
    protected boolean dispatch${prefix}${msg.name}(${prefix}${msg.name}Event msg) {
      #if $timestampOffset != -1:
        this.lastTimestamp = msg.getTimestamp();

      #end if 
        for (${prefix}BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.on${prefix}BeforeListener(msg);
        }

        for (${prefix}${msg.name}Listener ${msg.nameLower}Listener : ${msg.nameLower}Listeners) {
            ${msg.nameLower}Listener.on${prefix}${msg.name}(msg);
        }

        for (${prefix}AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.on${prefix}AfterListener(msg);
        }

        return true;
    }

  #end for
} 
