package ${package};

import com.core.util.ArrayUtils;
import com.core.util.log.Log;

/**
 * User: jgreco
 * THIS FILE IS AUTOGENERATED
 */
public class ${prefix}Dispatcher {
    private final Log log;
	
    public ${prefix}Dispatcher(Log log) {
        this.log = log;
    } 

  #for $msg in $msgs:
  #if $msg.input
    private ${prefix}${msg.name}Listener[] ${msg.name}Listeners = new ${prefix}${msg.name}Listener[0];
  #end if
  #end for

    public boolean onMessage(char msgType) {
        switch (msgType) {
          #for $msg in $msgs:
          #if $msg.input
            case '${msg.id}':
                if (${msg.name}Listeners.length == 0) {
                    return false;
                }
                for (${prefix}${msg.name}Listener ${msg.name}Listener : ${msg.name}Listeners) {
                    ${msg.name}Listener.on${prefix}${msg.name}();
                }
                return true;
          #end if
          #end for
            default:
                log.error(log.log().add("Unknown message type: ").add(msgType));
                return false;
        }
    }

    public void subscribe(Object listener) {
        subscribe(listener, listener.getClass());
    }

    private void subscribe(Object message, Class<?> clz) {
        if (clz == null)
            return;

        Class<?>[] interfaces = clz.getInterfaces();


        for (Class<?> intCls : interfaces) {
            if (intCls.getInterfaces().length > 0){
                subscribe(message,intCls);
            }
          #for $msg in $msgs
          #if msg.input
            if (intCls.equals(${prefix}${msg.name}Listener.class)) {
                ${msg.name}Listeners = append(${msg.name}Listeners, (${prefix}${msg.name}Listener) message);  
            }
          #end if
          #end for
        }

        subscribe(message, clz.getSuperclass());
    }
 
    private static <T> T[] append(T[] collection, T item) {
        if (!isSubscribed(collection, item)) {
            return ArrayUtils.append(collection, item); 
        }
        return collection;
    }

    private static <T> boolean isSubscribed(T[] collection, Object item) {
        for (T i : collection) {
           if (i == item)
              return true;
        }
        return false;
    }
}

