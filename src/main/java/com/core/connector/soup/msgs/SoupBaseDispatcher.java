package com.core.connector.soup.msgs;

import com.core.util.ArrayUtils;

/**
 * User: jgreco
 * THIS FILE IS AUTOGENERATED
 */
public abstract class SoupBaseDispatcher implements com.core.connector.Dispatcher {
    protected long lastTimestamp;

    private SoupDebugListener[] debugListeners = new SoupDebugListener[0];
    private SoupLoginAcceptedListener[] loginAcceptedListeners = new SoupLoginAcceptedListener[0];
    private SoupLoginRejectedListener[] loginRejectedListeners = new SoupLoginRejectedListener[0];
    private SoupSequencedDataListener[] sequencedDataListeners = new SoupSequencedDataListener[0];
    private SoupServerHeartbeatListener[] serverHeartbeatListeners = new SoupServerHeartbeatListener[0];
    private SoupEndOfSessionListener[] endOfSessionListeners = new SoupEndOfSessionListener[0];
    private SoupLoginRequestListener[] loginRequestListeners = new SoupLoginRequestListener[0];
    private SoupUnsequencedDataListener[] unsequencedDataListeners = new SoupUnsequencedDataListener[0];
    private SoupClientHeartbeatListener[] clientHeartbeatListeners = new SoupClientHeartbeatListener[0];
    private SoupLogoutRequestListener[] logoutRequestListeners = new SoupLogoutRequestListener[0];
    private SoupBeforeListener[] beforeMessageListeners = new SoupBeforeListener[0];
    private SoupAfterListener[] afterMessageListeners = new SoupAfterListener[0];

    public interface SoupBeforeListener {
       void onSoupBeforeListener(SoupCommonEvent msg);
    }

    public interface SoupAfterListener {
       void onSoupAfterListener(SoupCommonEvent msg);
    }

    @Override
    public long getTimestamp() {
        return this.lastTimestamp;
    }

    @Override
    public void subscribe(Object listener) {
        subscribe(listener, listener.getClass());
    }

    private void subscribe(Object message, Class<?> clz) {
        if (clz == null) {
            return;
        }

        Class<?>[] interfaces = clz.getInterfaces();

        for (Class<?> intCls : interfaces) {
            if (intCls.getInterfaces().length > 0){
               subscribe(message,intCls);
            }
            if (intCls.equals(SoupDebugListener.class)) {
                debugListeners = append(debugListeners, (SoupDebugListener) message);
            }

            if (intCls.equals(SoupLoginAcceptedListener.class)) {
                loginAcceptedListeners = append(loginAcceptedListeners, (SoupLoginAcceptedListener) message);
            }

            if (intCls.equals(SoupLoginRejectedListener.class)) {
                loginRejectedListeners = append(loginRejectedListeners, (SoupLoginRejectedListener) message);
            }

            if (intCls.equals(SoupSequencedDataListener.class)) {
                sequencedDataListeners = append(sequencedDataListeners, (SoupSequencedDataListener) message);
            }

            if (intCls.equals(SoupServerHeartbeatListener.class)) {
                serverHeartbeatListeners = append(serverHeartbeatListeners, (SoupServerHeartbeatListener) message);
            }

            if (intCls.equals(SoupEndOfSessionListener.class)) {
                endOfSessionListeners = append(endOfSessionListeners, (SoupEndOfSessionListener) message);
            }

            if (intCls.equals(SoupLoginRequestListener.class)) {
                loginRequestListeners = append(loginRequestListeners, (SoupLoginRequestListener) message);
            }

            if (intCls.equals(SoupUnsequencedDataListener.class)) {
                unsequencedDataListeners = append(unsequencedDataListeners, (SoupUnsequencedDataListener) message);
            }

            if (intCls.equals(SoupClientHeartbeatListener.class)) {
                clientHeartbeatListeners = append(clientHeartbeatListeners, (SoupClientHeartbeatListener) message);
            }

            if (intCls.equals(SoupLogoutRequestListener.class)) {
                logoutRequestListeners = append(logoutRequestListeners, (SoupLogoutRequestListener) message);
            }

            if (intCls.equals(SoupBeforeListener.class)) {
                beforeMessageListeners = append(beforeMessageListeners, (SoupBeforeListener) message);
            }

            if (intCls.equals(SoupAfterListener.class)) {
                afterMessageListeners = append(afterMessageListeners, (SoupAfterListener) message);
            }
        }

        subscribe(message, clz.getSuperclass());
    }

    private static <T> T[] append(T[] collection, T item) {
        if (!isSubscribed(collection, item)) {
            return ArrayUtils.append(collection, item);
        }
        return collection;
    }

    private static <T> boolean isSubscribed(T[] collection, T item) {
        for (T i : collection) {
           if (i == item) {
              return true;
           }
        }
        return false;
    }

    protected boolean dispatchSoupDebug(SoupDebugEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupDebugListener debugListener : debugListeners) {
            debugListener.onSoupDebug(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupLoginAccepted(SoupLoginAcceptedEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupLoginAcceptedListener loginAcceptedListener : loginAcceptedListeners) {
            loginAcceptedListener.onSoupLoginAccepted(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupLoginRejected(SoupLoginRejectedEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupLoginRejectedListener loginRejectedListener : loginRejectedListeners) {
            loginRejectedListener.onSoupLoginRejected(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupSequencedData(SoupSequencedDataEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupSequencedDataListener sequencedDataListener : sequencedDataListeners) {
            sequencedDataListener.onSoupSequencedData(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupServerHeartbeat(SoupServerHeartbeatEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupServerHeartbeatListener serverHeartbeatListener : serverHeartbeatListeners) {
            serverHeartbeatListener.onSoupServerHeartbeat(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupEndOfSession(SoupEndOfSessionEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupEndOfSessionListener endOfSessionListener : endOfSessionListeners) {
            endOfSessionListener.onSoupEndOfSession(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupLoginRequest(SoupLoginRequestEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupLoginRequestListener loginRequestListener : loginRequestListeners) {
            loginRequestListener.onSoupLoginRequest(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupUnsequencedData(SoupUnsequencedDataEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupUnsequencedDataListener unsequencedDataListener : unsequencedDataListeners) {
            unsequencedDataListener.onSoupUnsequencedData(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupClientHeartbeat(SoupClientHeartbeatEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupClientHeartbeatListener clientHeartbeatListener : clientHeartbeatListeners) {
            clientHeartbeatListener.onSoupClientHeartbeat(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchSoupLogoutRequest(SoupLogoutRequestEvent msg) {
        for (SoupBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onSoupBeforeListener(msg);
        }

        for (SoupLogoutRequestListener logoutRequestListener : logoutRequestListeners) {
            logoutRequestListener.onSoupLogoutRequest(msg);
        }

        for (SoupAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onSoupAfterListener(msg);
        }

        return true;
    }

} 
