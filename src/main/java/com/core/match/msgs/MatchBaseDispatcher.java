package com.core.match.msgs;

import com.core.util.ArrayUtils;

/**
 * User: jgreco
 * THIS FILE IS AUTOGENERATED
 */
public abstract class MatchBaseDispatcher implements com.core.connector.Dispatcher {
    protected long lastTimestamp;

    private MatchContributorListener[] contributorListeners = new MatchContributorListener[0];
    private MatchTraderListener[] traderListeners = new MatchTraderListener[0];
    private MatchSystemEventListener[] systemEventListeners = new MatchSystemEventListener[0];
    private MatchAccountListener[] accountListeners = new MatchAccountListener[0];
    private MatchSecurityListener[] securityListeners = new MatchSecurityListener[0];
    private MatchOrderListener[] orderListeners = new MatchOrderListener[0];
    private MatchClientOrderRejectListener[] clientOrderRejectListeners = new MatchClientOrderRejectListener[0];
    private MatchOrderRejectListener[] orderRejectListeners = new MatchOrderRejectListener[0];
    private MatchCancelListener[] cancelListeners = new MatchCancelListener[0];
    private MatchClientCancelReplaceRejectListener[] clientCancelReplaceRejectListeners = new MatchClientCancelReplaceRejectListener[0];
    private MatchCancelReplaceRejectListener[] cancelReplaceRejectListeners = new MatchCancelReplaceRejectListener[0];
    private MatchReplaceListener[] replaceListeners = new MatchReplaceListener[0];
    private MatchFillListener[] fillListeners = new MatchFillListener[0];
    private MatchInboundListener[] inboundListeners = new MatchInboundListener[0];
    private MatchOutboundListener[] outboundListeners = new MatchOutboundListener[0];
    private MatchQuoteListener[] quoteListeners = new MatchQuoteListener[0];
    private MatchMiscRejectListener[] miscRejectListeners = new MatchMiscRejectListener[0];
    private MatchBeforeListener[] beforeMessageListeners = new MatchBeforeListener[0];
    private MatchAfterListener[] afterMessageListeners = new MatchAfterListener[0];

    public interface MatchBeforeListener {
       void onMatchBeforeListener(MatchCommonEvent msg);
    }

    public interface MatchAfterListener {
       void onMatchAfterListener(MatchCommonEvent msg);
    }

    @Override
    public long getTimestamp() {
        return this.lastTimestamp;
    }

    @Override
    public void subscribe(Object listener) {
        subscribe(listener, listener.getClass());
    }

    private void subscribe(Object message, Class<?> clz) {
        if (clz == null) {
            return;
        }

        Class<?>[] interfaces = clz.getInterfaces();

        for (Class<?> intCls : interfaces) {
            if (intCls.getInterfaces().length > 0){
               subscribe(message,intCls);
            }
            if (intCls.equals(MatchContributorListener.class)) {
                contributorListeners = append(contributorListeners, (MatchContributorListener) message);
            }

            if (intCls.equals(MatchTraderListener.class)) {
                traderListeners = append(traderListeners, (MatchTraderListener) message);
            }

            if (intCls.equals(MatchSystemEventListener.class)) {
                systemEventListeners = append(systemEventListeners, (MatchSystemEventListener) message);
            }

            if (intCls.equals(MatchAccountListener.class)) {
                accountListeners = append(accountListeners, (MatchAccountListener) message);
            }

            if (intCls.equals(MatchSecurityListener.class)) {
                securityListeners = append(securityListeners, (MatchSecurityListener) message);
            }

            if (intCls.equals(MatchOrderListener.class)) {
                orderListeners = append(orderListeners, (MatchOrderListener) message);
            }

            if (intCls.equals(MatchClientOrderRejectListener.class)) {
                clientOrderRejectListeners = append(clientOrderRejectListeners, (MatchClientOrderRejectListener) message);
            }

            if (intCls.equals(MatchOrderRejectListener.class)) {
                orderRejectListeners = append(orderRejectListeners, (MatchOrderRejectListener) message);
            }

            if (intCls.equals(MatchCancelListener.class)) {
                cancelListeners = append(cancelListeners, (MatchCancelListener) message);
            }

            if (intCls.equals(MatchClientCancelReplaceRejectListener.class)) {
                clientCancelReplaceRejectListeners = append(clientCancelReplaceRejectListeners, (MatchClientCancelReplaceRejectListener) message);
            }

            if (intCls.equals(MatchCancelReplaceRejectListener.class)) {
                cancelReplaceRejectListeners = append(cancelReplaceRejectListeners, (MatchCancelReplaceRejectListener) message);
            }

            if (intCls.equals(MatchReplaceListener.class)) {
                replaceListeners = append(replaceListeners, (MatchReplaceListener) message);
            }

            if (intCls.equals(MatchFillListener.class)) {
                fillListeners = append(fillListeners, (MatchFillListener) message);
            }

            if (intCls.equals(MatchInboundListener.class)) {
                inboundListeners = append(inboundListeners, (MatchInboundListener) message);
            }

            if (intCls.equals(MatchOutboundListener.class)) {
                outboundListeners = append(outboundListeners, (MatchOutboundListener) message);
            }

            if (intCls.equals(MatchQuoteListener.class)) {
                quoteListeners = append(quoteListeners, (MatchQuoteListener) message);
            }

            if (intCls.equals(MatchMiscRejectListener.class)) {
                miscRejectListeners = append(miscRejectListeners, (MatchMiscRejectListener) message);
            }

            if (intCls.equals(MatchBeforeListener.class)) {
                beforeMessageListeners = append(beforeMessageListeners, (MatchBeforeListener) message);
            }

            if (intCls.equals(MatchAfterListener.class)) {
                afterMessageListeners = append(afterMessageListeners, (MatchAfterListener) message);
            }
        }

        subscribe(message, clz.getSuperclass());
    }

    private static <T> T[] append(T[] collection, T item) {
        if (!isSubscribed(collection, item)) {
            return ArrayUtils.append(collection, item);
        }
        return collection;
    }

    private static <T> boolean isSubscribed(T[] collection, T item) {
        for (T i : collection) {
           if (i == item) {
              return true;
           }
        }
        return false;
    }

    protected boolean dispatchMatchContributor(MatchContributorEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchContributorListener contributorListener : contributorListeners) {
            contributorListener.onMatchContributor(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchTrader(MatchTraderEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchTraderListener traderListener : traderListeners) {
            traderListener.onMatchTrader(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchSystemEvent(MatchSystemEventEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchSystemEventListener systemEventListener : systemEventListeners) {
            systemEventListener.onMatchSystemEvent(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchAccount(MatchAccountEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchAccountListener accountListener : accountListeners) {
            accountListener.onMatchAccount(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchSecurity(MatchSecurityEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchSecurityListener securityListener : securityListeners) {
            securityListener.onMatchSecurity(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchOrder(MatchOrderEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchOrderListener orderListener : orderListeners) {
            orderListener.onMatchOrder(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchClientOrderReject(MatchClientOrderRejectEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchClientOrderRejectListener clientOrderRejectListener : clientOrderRejectListeners) {
            clientOrderRejectListener.onMatchClientOrderReject(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchOrderReject(MatchOrderRejectEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchOrderRejectListener orderRejectListener : orderRejectListeners) {
            orderRejectListener.onMatchOrderReject(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchCancel(MatchCancelEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchCancelListener cancelListener : cancelListeners) {
            cancelListener.onMatchCancel(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchClientCancelReplaceReject(MatchClientCancelReplaceRejectEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchClientCancelReplaceRejectListener clientCancelReplaceRejectListener : clientCancelReplaceRejectListeners) {
            clientCancelReplaceRejectListener.onMatchClientCancelReplaceReject(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchCancelReplaceReject(MatchCancelReplaceRejectEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchCancelReplaceRejectListener cancelReplaceRejectListener : cancelReplaceRejectListeners) {
            cancelReplaceRejectListener.onMatchCancelReplaceReject(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchReplace(MatchReplaceEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchReplaceListener replaceListener : replaceListeners) {
            replaceListener.onMatchReplace(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchFill(MatchFillEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchFillListener fillListener : fillListeners) {
            fillListener.onMatchFill(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchInbound(MatchInboundEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchInboundListener inboundListener : inboundListeners) {
            inboundListener.onMatchInbound(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchOutbound(MatchOutboundEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchOutboundListener outboundListener : outboundListeners) {
            outboundListener.onMatchOutbound(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchQuote(MatchQuoteEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchQuoteListener quoteListener : quoteListeners) {
            quoteListener.onMatchQuote(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchMatchMiscReject(MatchMiscRejectEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (MatchBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onMatchBeforeListener(msg);
        }

        for (MatchMiscRejectListener miscRejectListener : miscRejectListeners) {
            miscRejectListener.onMatchMiscReject(msg);
        }

        for (MatchAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onMatchAfterListener(msg);
        }

        return true;
    }

} 
