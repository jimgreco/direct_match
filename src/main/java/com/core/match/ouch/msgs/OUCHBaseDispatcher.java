package com.core.match.ouch.msgs;

import com.core.util.ArrayUtils;

/**
 * User: jgreco
 * THIS FILE IS AUTOGENERATED
 */
public abstract class OUCHBaseDispatcher implements com.core.connector.Dispatcher {
    protected long lastTimestamp;

    private OUCHTradeConfirmationListener[] tradeConfirmationListeners = new OUCHTradeConfirmationListener[0];
    private OUCHOrderListener[] orderListeners = new OUCHOrderListener[0];
    private OUCHCancelListener[] cancelListeners = new OUCHCancelListener[0];
    private OUCHReplaceListener[] replaceListeners = new OUCHReplaceListener[0];
    private OUCHAcceptedListener[] acceptedListeners = new OUCHAcceptedListener[0];
    private OUCHCanceledListener[] canceledListeners = new OUCHCanceledListener[0];
    private OUCHReplacedListener[] replacedListeners = new OUCHReplacedListener[0];
    private OUCHCancelRejectedListener[] cancelRejectedListeners = new OUCHCancelRejectedListener[0];
    private OUCHRejectedListener[] rejectedListeners = new OUCHRejectedListener[0];
    private OUCHFillListener[] fillListeners = new OUCHFillListener[0];
    private OUCHBeforeListener[] beforeMessageListeners = new OUCHBeforeListener[0];
    private OUCHAfterListener[] afterMessageListeners = new OUCHAfterListener[0];

    public interface OUCHBeforeListener {
       void onOUCHBeforeListener(OUCHCommonEvent msg);
    }

    public interface OUCHAfterListener {
       void onOUCHAfterListener(OUCHCommonEvent msg);
    }

    @Override
    public long getTimestamp() {
        return this.lastTimestamp;
    }

    @Override
    public void subscribe(Object listener) {
        subscribe(listener, listener.getClass());
    }

    private void subscribe(Object message, Class<?> clz) {
        if (clz == null) {
            return;
        }

        Class<?>[] interfaces = clz.getInterfaces();

        for (Class<?> intCls : interfaces) {
            if (intCls.getInterfaces().length > 0){
               subscribe(message,intCls);
            }
            if (intCls.equals(OUCHTradeConfirmationListener.class)) {
                tradeConfirmationListeners = append(tradeConfirmationListeners, (OUCHTradeConfirmationListener) message);
            }

            if (intCls.equals(OUCHOrderListener.class)) {
                orderListeners = append(orderListeners, (OUCHOrderListener) message);
            }

            if (intCls.equals(OUCHCancelListener.class)) {
                cancelListeners = append(cancelListeners, (OUCHCancelListener) message);
            }

            if (intCls.equals(OUCHReplaceListener.class)) {
                replaceListeners = append(replaceListeners, (OUCHReplaceListener) message);
            }

            if (intCls.equals(OUCHAcceptedListener.class)) {
                acceptedListeners = append(acceptedListeners, (OUCHAcceptedListener) message);
            }

            if (intCls.equals(OUCHCanceledListener.class)) {
                canceledListeners = append(canceledListeners, (OUCHCanceledListener) message);
            }

            if (intCls.equals(OUCHReplacedListener.class)) {
                replacedListeners = append(replacedListeners, (OUCHReplacedListener) message);
            }

            if (intCls.equals(OUCHCancelRejectedListener.class)) {
                cancelRejectedListeners = append(cancelRejectedListeners, (OUCHCancelRejectedListener) message);
            }

            if (intCls.equals(OUCHRejectedListener.class)) {
                rejectedListeners = append(rejectedListeners, (OUCHRejectedListener) message);
            }

            if (intCls.equals(OUCHFillListener.class)) {
                fillListeners = append(fillListeners, (OUCHFillListener) message);
            }

            if (intCls.equals(OUCHBeforeListener.class)) {
                beforeMessageListeners = append(beforeMessageListeners, (OUCHBeforeListener) message);
            }

            if (intCls.equals(OUCHAfterListener.class)) {
                afterMessageListeners = append(afterMessageListeners, (OUCHAfterListener) message);
            }
        }

        subscribe(message, clz.getSuperclass());
    }

    private static <T> T[] append(T[] collection, T item) {
        if (!isSubscribed(collection, item)) {
            return ArrayUtils.append(collection, item);
        }
        return collection;
    }

    private static <T> boolean isSubscribed(T[] collection, T item) {
        for (T i : collection) {
           if (i == item) {
              return true;
           }
        }
        return false;
    }

    protected boolean dispatchOUCHTradeConfirmation(OUCHTradeConfirmationEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHTradeConfirmationListener tradeConfirmationListener : tradeConfirmationListeners) {
            tradeConfirmationListener.onOUCHTradeConfirmation(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHOrder(OUCHOrderEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHOrderListener orderListener : orderListeners) {
            orderListener.onOUCHOrder(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHCancel(OUCHCancelEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHCancelListener cancelListener : cancelListeners) {
            cancelListener.onOUCHCancel(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHReplace(OUCHReplaceEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHReplaceListener replaceListener : replaceListeners) {
            replaceListener.onOUCHReplace(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHAccepted(OUCHAcceptedEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHAcceptedListener acceptedListener : acceptedListeners) {
            acceptedListener.onOUCHAccepted(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHCanceled(OUCHCanceledEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHCanceledListener canceledListener : canceledListeners) {
            canceledListener.onOUCHCanceled(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHReplaced(OUCHReplacedEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHReplacedListener replacedListener : replacedListeners) {
            replacedListener.onOUCHReplaced(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHCancelRejected(OUCHCancelRejectedEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHCancelRejectedListener cancelRejectedListener : cancelRejectedListeners) {
            cancelRejectedListener.onOUCHCancelRejected(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHRejected(OUCHRejectedEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHRejectedListener rejectedListener : rejectedListeners) {
            rejectedListener.onOUCHRejected(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCHFill(OUCHFillEvent msg) {
        for (OUCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCHBeforeListener(msg);
        }

        for (OUCHFillListener fillListener : fillListeners) {
            fillListener.onOUCHFill(msg);
        }

        for (OUCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCHAfterListener(msg);
        }

        return true;
    }

} 
