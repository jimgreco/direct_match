package com.core.match.ouch2.msgs;

import com.core.util.ArrayUtils;

/**
 * User: jgreco
 * THIS FILE IS AUTOGENERATED
 */
public abstract class OUCH2BaseDispatcher implements com.core.connector.Dispatcher {
    protected long lastTimestamp;

    private OUCH2TradeConfirmationListener[] tradeConfirmationListeners = new OUCH2TradeConfirmationListener[0];
    private OUCH2OrderListener[] orderListeners = new OUCH2OrderListener[0];
    private OUCH2CancelListener[] cancelListeners = new OUCH2CancelListener[0];
    private OUCH2ReplaceListener[] replaceListeners = new OUCH2ReplaceListener[0];
    private OUCH2AcceptedListener[] acceptedListeners = new OUCH2AcceptedListener[0];
    private OUCH2CanceledListener[] canceledListeners = new OUCH2CanceledListener[0];
    private OUCH2ReplacedListener[] replacedListeners = new OUCH2ReplacedListener[0];
    private OUCH2CancelRejectedListener[] cancelRejectedListeners = new OUCH2CancelRejectedListener[0];
    private OUCH2RejectedListener[] rejectedListeners = new OUCH2RejectedListener[0];
    private OUCH2FillListener[] fillListeners = new OUCH2FillListener[0];
    private OUCH2BeforeListener[] beforeMessageListeners = new OUCH2BeforeListener[0];
    private OUCH2AfterListener[] afterMessageListeners = new OUCH2AfterListener[0];

    public interface OUCH2BeforeListener {
       void onOUCH2BeforeListener(OUCH2CommonEvent msg);
    }

    public interface OUCH2AfterListener {
       void onOUCH2AfterListener(OUCH2CommonEvent msg);
    }

    @Override
    public long getTimestamp() {
        return this.lastTimestamp;
    }

    @Override
    public void subscribe(Object listener) {
        subscribe(listener, listener.getClass());
    }

    private void subscribe(Object message, Class<?> clz) {
        if (clz == null) {
            return;
        }

        Class<?>[] interfaces = clz.getInterfaces();

        for (Class<?> intCls : interfaces) {
            if (intCls.getInterfaces().length > 0){
               subscribe(message,intCls);
            }
            if (intCls.equals(OUCH2TradeConfirmationListener.class)) {
                tradeConfirmationListeners = append(tradeConfirmationListeners, (OUCH2TradeConfirmationListener) message);
            }

            if (intCls.equals(OUCH2OrderListener.class)) {
                orderListeners = append(orderListeners, (OUCH2OrderListener) message);
            }

            if (intCls.equals(OUCH2CancelListener.class)) {
                cancelListeners = append(cancelListeners, (OUCH2CancelListener) message);
            }

            if (intCls.equals(OUCH2ReplaceListener.class)) {
                replaceListeners = append(replaceListeners, (OUCH2ReplaceListener) message);
            }

            if (intCls.equals(OUCH2AcceptedListener.class)) {
                acceptedListeners = append(acceptedListeners, (OUCH2AcceptedListener) message);
            }

            if (intCls.equals(OUCH2CanceledListener.class)) {
                canceledListeners = append(canceledListeners, (OUCH2CanceledListener) message);
            }

            if (intCls.equals(OUCH2ReplacedListener.class)) {
                replacedListeners = append(replacedListeners, (OUCH2ReplacedListener) message);
            }

            if (intCls.equals(OUCH2CancelRejectedListener.class)) {
                cancelRejectedListeners = append(cancelRejectedListeners, (OUCH2CancelRejectedListener) message);
            }

            if (intCls.equals(OUCH2RejectedListener.class)) {
                rejectedListeners = append(rejectedListeners, (OUCH2RejectedListener) message);
            }

            if (intCls.equals(OUCH2FillListener.class)) {
                fillListeners = append(fillListeners, (OUCH2FillListener) message);
            }

            if (intCls.equals(OUCH2BeforeListener.class)) {
                beforeMessageListeners = append(beforeMessageListeners, (OUCH2BeforeListener) message);
            }

            if (intCls.equals(OUCH2AfterListener.class)) {
                afterMessageListeners = append(afterMessageListeners, (OUCH2AfterListener) message);
            }
        }

        subscribe(message, clz.getSuperclass());
    }

    private static <T> T[] append(T[] collection, T item) {
        if (!isSubscribed(collection, item)) {
            return ArrayUtils.append(collection, item);
        }
        return collection;
    }

    private static <T> boolean isSubscribed(T[] collection, T item) {
        for (T i : collection) {
           if (i == item) {
              return true;
           }
        }
        return false;
    }

    protected boolean dispatchOUCH2TradeConfirmation(OUCH2TradeConfirmationEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2TradeConfirmationListener tradeConfirmationListener : tradeConfirmationListeners) {
            tradeConfirmationListener.onOUCH2TradeConfirmation(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2Order(OUCH2OrderEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2OrderListener orderListener : orderListeners) {
            orderListener.onOUCH2Order(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2Cancel(OUCH2CancelEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2CancelListener cancelListener : cancelListeners) {
            cancelListener.onOUCH2Cancel(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2Replace(OUCH2ReplaceEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2ReplaceListener replaceListener : replaceListeners) {
            replaceListener.onOUCH2Replace(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2Accepted(OUCH2AcceptedEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2AcceptedListener acceptedListener : acceptedListeners) {
            acceptedListener.onOUCH2Accepted(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2Canceled(OUCH2CanceledEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2CanceledListener canceledListener : canceledListeners) {
            canceledListener.onOUCH2Canceled(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2Replaced(OUCH2ReplacedEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2ReplacedListener replacedListener : replacedListeners) {
            replacedListener.onOUCH2Replaced(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2CancelRejected(OUCH2CancelRejectedEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2CancelRejectedListener cancelRejectedListener : cancelRejectedListeners) {
            cancelRejectedListener.onOUCH2CancelRejected(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2Rejected(OUCH2RejectedEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2RejectedListener rejectedListener : rejectedListeners) {
            rejectedListener.onOUCH2Rejected(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchOUCH2Fill(OUCH2FillEvent msg) {
        for (OUCH2BeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onOUCH2BeforeListener(msg);
        }

        for (OUCH2FillListener fillListener : fillListeners) {
            fillListener.onOUCH2Fill(msg);
        }

        for (OUCH2AfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onOUCH2AfterListener(msg);
        }

        return true;
    }

} 
