package com.core.match.itch.msgs;

import com.core.util.ArrayUtils;

/**
 * User: jgreco
 * THIS FILE IS AUTOGENERATED
 */
public abstract class ITCHBaseDispatcher implements com.core.connector.Dispatcher {
    protected long lastTimestamp;

    private ITCHSystemListener[] systemListeners = new ITCHSystemListener[0];
    private ITCHSecurityListener[] securityListeners = new ITCHSecurityListener[0];
    private ITCHOrderListener[] orderListeners = new ITCHOrderListener[0];
    private ITCHOrderCancelListener[] orderCancelListeners = new ITCHOrderCancelListener[0];
    private ITCHOrderExecutedListener[] orderExecutedListeners = new ITCHOrderExecutedListener[0];
    private ITCHTradeListener[] tradeListeners = new ITCHTradeListener[0];
    private ITCHBeforeListener[] beforeMessageListeners = new ITCHBeforeListener[0];
    private ITCHAfterListener[] afterMessageListeners = new ITCHAfterListener[0];

    public interface ITCHBeforeListener {
       void onITCHBeforeListener(ITCHCommonEvent msg);
    }

    public interface ITCHAfterListener {
       void onITCHAfterListener(ITCHCommonEvent msg);
    }

    @Override
    public long getTimestamp() {
        return this.lastTimestamp;
    }

    @Override
    public void subscribe(Object listener) {
        subscribe(listener, listener.getClass());
    }

    private void subscribe(Object message, Class<?> clz) {
        if (clz == null) {
            return;
        }

        Class<?>[] interfaces = clz.getInterfaces();

        for (Class<?> intCls : interfaces) {
            if (intCls.getInterfaces().length > 0){
               subscribe(message,intCls);
            }
            if (intCls.equals(ITCHSystemListener.class)) {
                systemListeners = append(systemListeners, (ITCHSystemListener) message);
            }

            if (intCls.equals(ITCHSecurityListener.class)) {
                securityListeners = append(securityListeners, (ITCHSecurityListener) message);
            }

            if (intCls.equals(ITCHOrderListener.class)) {
                orderListeners = append(orderListeners, (ITCHOrderListener) message);
            }

            if (intCls.equals(ITCHOrderCancelListener.class)) {
                orderCancelListeners = append(orderCancelListeners, (ITCHOrderCancelListener) message);
            }

            if (intCls.equals(ITCHOrderExecutedListener.class)) {
                orderExecutedListeners = append(orderExecutedListeners, (ITCHOrderExecutedListener) message);
            }

            if (intCls.equals(ITCHTradeListener.class)) {
                tradeListeners = append(tradeListeners, (ITCHTradeListener) message);
            }

            if (intCls.equals(ITCHBeforeListener.class)) {
                beforeMessageListeners = append(beforeMessageListeners, (ITCHBeforeListener) message);
            }

            if (intCls.equals(ITCHAfterListener.class)) {
                afterMessageListeners = append(afterMessageListeners, (ITCHAfterListener) message);
            }
        }

        subscribe(message, clz.getSuperclass());
    }

    private static <T> T[] append(T[] collection, T item) {
        if (!isSubscribed(collection, item)) {
            return ArrayUtils.append(collection, item);
        }
        return collection;
    }

    private static <T> boolean isSubscribed(T[] collection, T item) {
        for (T i : collection) {
           if (i == item) {
              return true;
           }
        }
        return false;
    }

    protected boolean dispatchITCHSystem(ITCHSystemEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (ITCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onITCHBeforeListener(msg);
        }

        for (ITCHSystemListener systemListener : systemListeners) {
            systemListener.onITCHSystem(msg);
        }

        for (ITCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onITCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchITCHSecurity(ITCHSecurityEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (ITCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onITCHBeforeListener(msg);
        }

        for (ITCHSecurityListener securityListener : securityListeners) {
            securityListener.onITCHSecurity(msg);
        }

        for (ITCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onITCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchITCHOrder(ITCHOrderEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (ITCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onITCHBeforeListener(msg);
        }

        for (ITCHOrderListener orderListener : orderListeners) {
            orderListener.onITCHOrder(msg);
        }

        for (ITCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onITCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchITCHOrderCancel(ITCHOrderCancelEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (ITCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onITCHBeforeListener(msg);
        }

        for (ITCHOrderCancelListener orderCancelListener : orderCancelListeners) {
            orderCancelListener.onITCHOrderCancel(msg);
        }

        for (ITCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onITCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchITCHOrderExecuted(ITCHOrderExecutedEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (ITCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onITCHBeforeListener(msg);
        }

        for (ITCHOrderExecutedListener orderExecutedListener : orderExecutedListeners) {
            orderExecutedListener.onITCHOrderExecuted(msg);
        }

        for (ITCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onITCHAfterListener(msg);
        }

        return true;
    }

    protected boolean dispatchITCHTrade(ITCHTradeEvent msg) {
        this.lastTimestamp = msg.getTimestamp();

        for (ITCHBeforeListener beforeMessageListener : beforeMessageListeners) {
            beforeMessageListener.onITCHBeforeListener(msg);
        }

        for (ITCHTradeListener tradeListener : tradeListeners) {
            tradeListener.onITCHTrade(msg);
        }

        for (ITCHAfterListener afterMessageListener : afterMessageListeners) {
            afterMessageListener.onITCHAfterListener(msg);
        }

        return true;
    }

} 
