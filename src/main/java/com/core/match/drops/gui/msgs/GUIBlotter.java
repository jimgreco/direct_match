package com.core.match.drops.gui.msgs;

import com.core.match.drops.DropVersionable;
import com.core.match.drops.gui.GUIUtils;

import java.nio.ByteBuffer; 

/* THIS FILE IS AUTOGENERATED */
public class GUIBlotter implements DropVersionable {
    private static final byte[] TYPE_BYTES = "\"type\":".getBytes();  
    private static final byte[] ACCOUNT_BYTES = ",\"account\":".getBytes();
    private static final byte[] TRADER_BYTES = ",\"trader\":".getBytes();
    private static final byte[] SECURITY_BYTES = ",\"security\":".getBytes();
    private static final byte[] SIDE_BYTES = ",\"side\":".getBytes();
    private static final byte[] CLORDID_BYTES = ",\"clOrdID\":".getBytes();
    private static final byte[] UPDATETYPE_BYTES = ",\"updateType\":".getBytes();
    private static final byte[] REJECTREASON_BYTES = ",\"rejectReason\":".getBytes();
    private static final byte[] PRICE_BYTES = ",\"price\":".getBytes();
    private static final byte[] PRICE32_BYTES = ",\"price32\":".getBytes();
    private static final byte[] QTY_BYTES = ",\"qty\":".getBytes();
    private static final byte[] CUMQTY_BYTES = ",\"cumQty\":".getBytes();
    private static final byte[] LASTQTY_BYTES = ",\"lastQty\":".getBytes();
    private static final byte[] LASTPRICE_BYTES = ",\"lastPrice\":".getBytes();
    private static final byte[] NOTIONAL_BYTES = ",\"notional\":".getBytes();
    private static final byte[] CREATED_BYTES = ",\"created\":".getBytes();
    private static final byte[] UPDATED_BYTES = ",\"updated\":".getBytes();
    private static final byte[] SES_BYTES = ",\"ses\":".getBytes();
    private static final byte[] CONTRIB_BYTES = ",\"contrib\":".getBytes();
    private static final byte[] ID_BYTES = ",\"id\":".getBytes();
    private static final byte[] VER_BYTES = ",\"ver\":".getBytes();
    private static final byte[] TIME_BYTES = ",\"time\":".getBytes();

    private final String account; 
    private final String trader; 
    private final String security; 
    private final boolean side; 
	private String clOrdID;
	private String updateType;
    private final String rejectReason; 
	private long price;
	private long price32;
	private int qty;
	private int cumQty;
	private int lastQty;
	private long lastPrice;
	private long notional;
    private final long created; 
	private long updated;
    private final int id; 
	private int ver;
	private long time;

    public GUIBlotter(
		int id
        , String account
        , String trader
        , String security
        , boolean side
        , String rejectReason
        , long created
		) {
        this.account = account;
        this.trader = trader;
        this.security = security;
        this.side = side;
        this.rejectReason = rejectReason;
        this.created = created;
        this.id = id;
    }

	public void write(ByteBuffer buffer, String ses, String contrib) {
		GUIUtils.startObject(buffer);
		GUIUtils.writeString(buffer, TYPE_BYTES, getType());		
		GUIUtils.writeString(buffer, ACCOUNT_BYTES, getAccount());		
		GUIUtils.writeString(buffer, TRADER_BYTES, getTrader());		
		GUIUtils.writeString(buffer, SECURITY_BYTES, getSecurity());		
		GUIUtils.writeBuySell(buffer, SIDE_BYTES, getSide());		
		GUIUtils.writeString(buffer, CLORDID_BYTES, getClOrdID());		
		GUIUtils.writeString(buffer, UPDATETYPE_BYTES, getUpdateType());		
		GUIUtils.writeString(buffer, REJECTREASON_BYTES, getRejectReason());		
		GUIUtils.writeLong(buffer, PRICE_BYTES, getPrice());		
		GUIUtils.writeLong(buffer, PRICE32_BYTES, getPrice32());		
		GUIUtils.writeInt(buffer, QTY_BYTES, getQty());		
		GUIUtils.writeInt(buffer, CUMQTY_BYTES, getCumQty());		
		GUIUtils.writeInt(buffer, LASTQTY_BYTES, getLastQty());		
		GUIUtils.writeLong(buffer, LASTPRICE_BYTES, getLastPrice());		
		GUIUtils.writeLong(buffer, NOTIONAL_BYTES, getNotional());		
		GUIUtils.writeTime(buffer, CREATED_BYTES, getCreated());		
		GUIUtils.writeTime(buffer, UPDATED_BYTES, getUpdated());		
		GUIUtils.writeString(buffer, SES_BYTES, ses);
		GUIUtils.writeString(buffer, CONTRIB_BYTES, contrib);
		GUIUtils.writeInt(buffer, ID_BYTES, getId());		
		GUIUtils.writeInt(buffer, VER_BYTES, getVer());		
		GUIUtils.writeTime(buffer, TIME_BYTES, getTime());		
		GUIUtils.endObject(buffer);
    }
  
    public String getAccount() {
        return account;
    }
  
    public String getTrader() {
        return trader;
    }
  
    public String getSecurity() {
        return security;
    }
  
    public boolean getSide() {
        return side;
    }
  
    public String getClOrdID() {
        return clOrdID;
    }
  
    public String getUpdateType() {
        return updateType;
    }
  
    public String getRejectReason() {
        return rejectReason;
    }
  
    public long getPrice() {
        return price;
    }
  
    public long getPrice32() {
        return price32;
    }
  
    public int getQty() {
        return qty;
    }
  
    public int getCumQty() {
        return cumQty;
    }
  
    public int getLastQty() {
        return lastQty;
    }
  
    public long getLastPrice() {
        return lastPrice;
    }
  
    public long getNotional() {
        return notional;
    }
  
    public long getCreated() {
        return created;
    }
  
    public long getUpdated() {
        return updated;
    }
  
    public int getId() {
        return id;
    }
  
    public int getVer() {
        return ver;
    }
  
    public long getTime() {
        return time;
    }

	public void setClOrdID(String val) {
		this.clOrdID = val;
	}

	public void setUpdateType(String val) {
		this.updateType = val;
	}

	public void setPrice(long val) {
		this.price = val;
	}

	public void setPrice32(long val) {
		this.price32 = val;
	}

	public void setQty(int val) {
		this.qty = val;
	}

	public void setCumQty(int val) {
		this.cumQty = val;
	}

	public void setLastQty(int val) {
		this.lastQty = val;
	}

	public void setLastPrice(long val) {
		this.lastPrice = val;
	}

	public void setNotional(long val) {
		this.notional = val;
	}

	public void setUpdated(long val) {
		this.updated = val;
	}

	public void setVer(int val) {
		this.ver = val;
	}

	public void setTime(long val) {
		this.time = val;
	}
	
	public String getType() {
		return "blotter";
	}
} 
